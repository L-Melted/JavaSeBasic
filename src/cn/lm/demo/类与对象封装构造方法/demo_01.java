package cn.lm.demo.类与对象封装构造方法;

public class demo_01 {
    /**
     * 类与对象、封装构造方法
     * 什么是对象：
     *     对象：是一类事物的具体体现
     *
     * 什么是类
     *      类：是一组相关属性和行为（功能）的集合
     *
     *
     * 类与对象的关系：
     *     类是对一类事物的描述，是抽象的
     *     对象是一类事物的实例，是具体的
     *     类是对象的模板，对象是类的实体
     *
     * Java语言是一种面向对象的程序设计语言，包含了三大基本特征，即封装、继承和多态。
     *
     *      继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；
     *           得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段。
     *      封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。
     *           面向对象的本质就是将现实世界描绘称一系列完全自治、封闭的对象。
     *           我们编写一个类就是对数据和数据操作的封装。
     *           我们在类中编写的方法就是对实现细节的一种封装。
     *
     *      多态性：多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。
     *             多态性分为编译时的多态性和运行时的多态性。
     *             方法重载实现的是编译时的多态性（也称为前绑定），而方法重写实现的是运行时的多态性（也称为后绑定）.
     *             运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事情：
     *       抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些
     *            行为的细节是什么。
     *
     *
     * */



}
