package cn.lm.demo.day10_接口多态;

public class PolymorphicDemo {
    /*
    * 多态是继封装、继承之后，面向对象的第三大特性。
    * 多态：是指同一类事物的同一行为，在具体不同的事物中具有不同的表现形式。
    *      一个父类的一个方法  在子类中重写后,各个子类对象调用这个方法的时候, 运行的结果是不一样
    * 1. 继承或者实现【二选一】
    * 2. 父类引用指向子类对象【格式体现】  父类的变量可以接受子类的对象/父接口的变量指向子类对象
    *       Zi zi=new Zi();
    *       Fu fu=new Fu();
    *       Fu fu = new Zi(); 【多态的格式体现】
    * 3. 方法的重写【意义体现：不重写，无意义】
    * 2.3 访问方法的规律
    *     在多态调用方法的时候遵循: 编译看左边, 运行看右边的规律 ,  左右以等号分界.
    *     编译看左边:  编译时检查左边父类中是否有该方法，若没有方法,  则编译报错
    *     运行看右边:  运行时看等号右边具体是哪个子类创建的对象，执行的就是是该子类重写后方法。
    *     也就是说多态情况下父类不能调用子类的特有方法!!
    * 多态的好处:
    *     实际开发的过程中，父类类型作为方法形式参数，传递子类对象给方法，进行方法的调用，更能体现出多态的扩展性与便利。
    *
    * 多态的转型分为向上转型与向下转型两种：
    * - 向上转型：多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。
    *   当父类引用指向一个子类对象时，便是向上转型。
    *       父类类型  变量名 = new 子类类型();   // 小 转 大
    *       如：Animal a = new Cat();
    *
    * - 向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。
    *   一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。
    *   使用格式：
    *   子类类型 变量名 = (子类类型) 父类变量名;
    *       如:Cat c = (Cat)  a;
    *
    * 为什么要转型:类引用无法调用子类特有方法
    *
    *
    * Java提供了 instanceof 关键字，给引用变量做类型的校验
    * 变量名 instanceof 类型
    *    如果变量属于该类型，返回true。
    *    如果变量不属于该类型，返回false。
    *
    * */
}
